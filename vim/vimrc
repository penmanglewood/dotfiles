" Leader
let mapleader = " "

set backspace=2   " Backspace deleted like most programs in insert mode
set nocompatible  " Use Vim settings, rather then Vi settings
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set noshowmode

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

if filereadable(expand("~/.vimrc.plugins"))
  source ~/.vimrc.plugins
endif

set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim

filetype plugin indent on

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

" Numbers
set number
set numberwidth=5

" Use The Silver Searcher
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects
    " .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
set complete=.,w,t
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Markdown files end in .md
au BufRead,BufNewFile *.md set filetype=markdown

" Enable spellchecking for Markdown
au BufRead,BufNewFile *.md setlocal spell

" Automatically wrap at 80 characters for Markdown
au BufRead,BufNewFile *.md setlocal textwidth=80

nnoremap <silent> <F2> :TlistToggle<CR>

set csto=0
set cst

let g:closetag_html_style=1
au Filetype html,xml,xsl source ~/.vim/bundle/closetag.vim/plugin/closetag.vim

" Toggle NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

" Ruby files default to 2 space indent
au FileType ruby setlocal tabstop=2 shiftwidth=2 et

au FileType php setlocal tabstop=4 shiftwidth=4 et

" Cold folding
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1

let g:phpqa_codesniffer_args = "--standard=$HOME/phpcs-ruleset.xml"

" Don't run messdetector on save (default = 1)
let g:phpqa_messdetector_autorun = 0

" " Don't run codesniffer on save (default = 1)
let g:phpqa_codesniffer_autorun = 0

" vim-rspec mappings
let g:rspec_command = "!bundle exec rspec {spec}"
nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>s :call RunNearestSpec()<CR>
nnoremap <Leader>l :call RunLastSpec()<CR>

" vim-go mappings
au FileType go nmap <Leader>ds <Plug>(go-run)

set history=1000
